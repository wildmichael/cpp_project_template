name: CI

on:
  - push
  - workflow_dispatch

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Restore the vcpkg artifacts.
        uses: actions/cache@v2
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{github.workspace}}/build/vcpkg_installed/
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ runner.os }}-vcpkg_json_${{ hashFiles( 'vcpkg.json' ) }}-triplet_${{ matrix.triplet }}-invalidate

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: >
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          -DCATCH2_REPORTER_NAME=junit
          -DCATCH2_REDIRECT_OUTPUT=ON

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: ctest --output-on-failure --verbose -C $BUILD_TYPE

      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: build/test/out/*.xml
